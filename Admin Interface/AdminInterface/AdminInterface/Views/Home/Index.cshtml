@{
    ViewData["Title"] = "Home";
}


<!--<div class="text-center">
    <h1 class="display-4">Welcome</h1>
    <p>Learn about <a href="https://docs.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>
</div>
-->
<!-- grid layout -->
<div class="dashboardSection">
    <div class="dashboardBlock dashboardLeftBlock">
        <span class="dashboardSectionHeader">Monthly Sales</span>

        <!--<div id="ordersTargetWidget">

        <div class="ordersWidgetSection">
            <span id="ordersTargetSettingHeader">Last 30 days</span>

            <div class="chartWrapper">
                <div class="progressContainer">
                    <svg class="progressBar" viewBox="0 0 64 64">
                        <circle class="progressBarTrack" cx="50%" cy="50%" r="30px"></circle>
                        <circle class="progressBarThumb" cx="50%" cy="50%" r="30px"></circle>
                    </svg>
                    <span class="progressValue">982</span>
                </div>
            </div>

            <div class="chartSettingsWrapper">
                <div class="widgetBtn chartSettingsBtn">settings</div>
            </div>

        </div>

        <div class="ordersWidgetSection">
            <div id="targetsWrapper">
                <div id="targetsHeader">Targets</div>
                <div class="orderTarget selectedTarget" data-value="1500">30 days: 1500</div>
                <div class="orderTarget" data-value="3200">60 days: 3200</div>
                <div class="widgetBtn">view more</div>
            </div>
        </div>-->

        <canvas id="lineChart"></canvas>

        @model IEnumerable<AdminInterface.Models.Products>

    </div>
    <div class="dashboardBlock dashboardRightBlock">
        <span class="dashboardSectionHeader">Recent Orders</span>
        <table id="orderStatusTable" class="table">
            <thead>
                <tr>
                    <th>Order No.</th>
                    <th>Total</th>
                    <th>Date</th>
                </tr>
            </thead>
            <tbody>

                @{
                    // get orders data
                    List<Orders> orders = (List<Orders>)ViewData["Orders"];
                    List<Orders> recentOrders = orders.GetRange(0, 5);
                }

                @foreach (var order in recentOrders)
                {
                    <a asp-controller="Orders" asp-action="Details" asp-route-id="@order.OrderId">
                        <tr>
                            <td>@order.OrderId</td>
                            @{
                                Products orderProduct = Model.Where(p => p.ProductId == order.ProductId).ToList()[0];
                                var orderTotal = orderProduct.Price * order.Quantity;
                            }
                            <td>£@orderTotal.ToString("n2")</td>
                            <td>@order.TimeOrdered</td>
                        </tr>
                    </a>
                }

                <!--<a asp-controller="Orders" asp-action="Details" asp-route-id="6">
                    <tr>
                        <td>#6</td>
                        <td>£482.96</td>
                        <td>Processing</td>
                    </tr>
                </a>
                <a asp-controller="Orders" asp-action="Details" asp-route-id="12">
                    <tr>
                        <td>#12</td>
                        <td>£440.00</td>
                        <td>Dispatched</td>
                    </tr>
                </a>
                <a asp-controller="Orders" asp-action="Details" asp-route-id="18">
                    <tr>
                        <td>#18</td>
                        <td>£229.00</td>
                        <td>Dispatched</td>
                    </tr>
                </a>-->
            </tbody>
        </table>
    </div>
</div>


@{
    var popularProducts = new List<Products>();
    var lowStockProducts = new List<Products>();
    foreach (var item in Model)
    {
        // get popular products
        // if less than 3 products in array
        if (popularProducts.Count < 3)
        {
            // add to array
            popularProducts.Add(item);
        }
        else
        {
            // first is lowest
            popularProducts = popularProducts.OrderBy(p => p.TotalSold).ToList();
            // if current product has more sales than lowest in array
            if (popularProducts[0].TotalSold < item.TotalSold)
            {
                // replace lowest product with current one
                popularProducts[0] = item;
            }
        }

        // get low stock products
        if (lowStockProducts.Count < 3)
        {
            // add to array
            lowStockProducts.Add(item);
        }
        else
        {
            // first is highest
            lowStockProducts = lowStockProducts.OrderByDescending(p => p.Stock).ToList();
            // if current product has less stock than highest in array
            if (lowStockProducts[0].Stock > item.Stock)
            {
                // replace highest stock product with current one
                lowStockProducts[0] = item;
            }
        }

    }

    // order array by total sold (1st highest)
    popularProducts = popularProducts.OrderByDescending(p => p.TotalSold).ToList();
    // order array by stock (1st lowest)
    lowStockProducts = lowStockProducts.OrderBy(p => p.Stock).ToList();
}

<div class="dashboardSection">
    <div class="dashboardBlock dashboardLeftBlock">
        <span class="dashboardSectionHeader">Most Popular</span>
        <div id="productsWrapper">

            @foreach (var product in popularProducts)
            {
                <a asp-controller="Products" asp-action="Details" asp-route-id="@product.ProductId">
                    <div class="product">
                        <div class="productContainer">
                            <img class="productImage" src="@product.ImageUrl">
                            <div class="productName">@product.ProductName</div>
                            <div class="productSold">Total Sold: @product.TotalSold</div>
                        </div>
                    </div>
                </a>
            }

        </div>
    </div>

    <div class="dashboardBlock dashboardRightBlock">
        <span class="dashboardSectionHeader">Low in Stock</span>
        <div id="productsWrapper">

            @foreach (var product in lowStockProducts)
            {
                <a asp-controller="Products" asp-action="Details" asp-route-id="@product.ProductId">
                    <div class="product">
                        <div class="productContainer">
                            <img class="productImage" src="@product.ImageUrl">
                            <div class="productName">@product.ProductName</div>
                            <div class="productSold">Stock: @product.Stock</div>
                        </div>
                    </div>
                </a>
            }

        </div>
    </div>


</div>


@{
    // get graph nodes
    List<DashboardGraphNode> graphNodes = (List<DashboardGraphNode>)ViewData["GraphNodes"];
}

@foreach (var node in graphNodes)
{
    <!-- add data for graph -->
    <data class="graphData" data-sales="@node.totalSales" data-month="@node.month"></data>
}


<script>let activePageIndex = 0;

    // create array for node data
    var monthsData = [];
    var salesData = [];

    // for each node in data
    $(".graphData").each(function () {
        // add sales data to array
        salesData.push($(this).attr('data-sales'));
        // add month data to array
        monthsData.push($(this).attr('data-month'));
    });

    const chart = document.getElementById("lineChart");
    let lineChart = new Chart(chart, {
        // The type of chart we want to create
        type: 'line',
        data: {
            labels: monthsData,
            datasets: [{
                label: 'Sales',
                fill: false,
                borderColor: 'rgb(255, 99, 132)',
                data: salesData
            }]
        },
        // Configuration options go here
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                yAxes: [{
                    ticks: {
                        beginAtZero: true
                    }
                }]
            }
        }
    });</script>
