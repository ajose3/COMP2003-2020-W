CREATE TABLE [dbo].[Customer](
	[Customer_ID] [int] NOT NULL,
	[First_Name] [varchar](50) NOT NULL,
	[Last_Name] [varchar](50) NOT NULL,
	[Age] [int] NOT NULL,
	[Gender] [varchar](15) NOT NULL,
	[Address] [varchar](50) NOT NULL,
	[Email_Address] [varchar](64) NOT NULL,
	[Phone_Number] [varchar](20) NOT NULL,
	[Password] [varchar](50) NOT NULL,
	[Admin] [bit] NOT NULL,
 CONSTRAINT [PK_Cumstomer_Details] PRIMARY KEY CLUSTERED 
(
	[Customer_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [dbo].[Customer] ADD  DEFAULT ((0)) FOR [Admin]
GO


CREATE TABLE [dbo].[Orders](
	[Order_ID] [int] NOT NULL,
	[Date_Time] [datetime] NOT NULL,
	[Quantity] [int] NOT NULL,
	[Product_ID] [int] NOT NULL,
	[Customer_ID] [int] NOT NULL,
 CONSTRAINT [PK_Order_Details] PRIMARY KEY CLUSTERED 
(
	[Order_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [dbo].[Orders]  WITH CHECK ADD  CONSTRAINT [FK_Customer_ID] FOREIGN KEY([Customer_ID])
REFERENCES [dbo].[Customer] ([Customer_ID])
GO
ALTER TABLE [dbo].[Orders] CHECK CONSTRAINT [FK_Customer_ID]
GO
ALTER TABLE [dbo].[Orders]  WITH CHECK ADD  CONSTRAINT [FK_Product_ID] FOREIGN KEY([Product_ID])
REFERENCES [dbo].[Products] ([Product_ID])
GO
ALTER TABLE [dbo].[Orders] CHECK CONSTRAINT [FK_Product_ID]
GO


CREATE TABLE [dbo].[Products](
	[Product_ID] [int] NOT NULL,
	[Product_Name] [varchar](50) NOT NULL,
	[Stock] [int] NOT NULL,
	[Type_of_Product] [varchar](50) NOT NULL,
	[Amount_Sold] [int] NULL,
	[Price] [money] NOT NULL,
 CONSTRAINT [PK_Product_Details] PRIMARY KEY CLUSTERED 
(
	[Product_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [dbo].[Products] ADD  DEFAULT ((0)) FOR [Amount_Sold]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[Remove_Rating] 
ON [dbo].[Products] AFTER DELETE 
AS
DELETE FROM Ratings WHERE
Ratings.Product_ID = (SELECT deleted.Product_ID FROM deleted)
GO
ALTER TABLE [dbo].[Products] ENABLE TRIGGER [Remove_Rating]
GO


CREATE TABLE [dbo].[Ratings](
	[Customer_ID] [int] NOT NULL,
	[Product_ID] [int] NOT NULL,
	[Rating] [tinyint] NOT NULL,
	[Description] [varchar](200) NULL,
 CONSTRAINT [PK_Rating_Details] PRIMARY KEY CLUSTERED 
(
	[Customer_ID] ASC,
	[Product_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [dbo].[Ratings]  WITH CHECK ADD  CONSTRAINT [FK_Details_Cumstomer] FOREIGN KEY([Customer_ID])
REFERENCES [dbo].[Customer] ([Customer_ID])
GO
ALTER TABLE [dbo].[Ratings] CHECK CONSTRAINT [FK_Details_Cumstomer]
GO
ALTER TABLE [dbo].[Ratings]  WITH CHECK ADD  CONSTRAINT [FK_Details_Product] FOREIGN KEY([Product_ID])
REFERENCES [dbo].[Products] ([Product_ID])
GO
ALTER TABLE [dbo].[Ratings] CHECK CONSTRAINT [FK_Details_Product]
GO
ALTER TABLE [dbo].[Ratings]  WITH CHECK ADD CHECK  (([Rating]>=(1) AND [Rating]<=(10)))
GO
--------------------------------------------------------------------------------------------------------------

CREATE VIEW [dbo].[Top_Rated] AS 
SELECT Ratings.Rating , Products.Product_Name, Ratings.Product_ID
FROM Ratings
INNER JOIN Products ON Products.Product_ID = Ratings.Product_ID;
GO
--------------------------------------------------------------------------------------------------------------

CREATE PROCEDURE [dbo].[Add_Customer] (
    @cust_ID int,
    @Name_First varchar (50),
    @Name_Last varchar (50),
    @Years_Old int,
    @Male_or_Female varchar (15),
    @Residence varchar (50),
    @Address_Email varchar (64),
    @Number_Phone varchar (20),
    @Passcode varchar (50),
    @Role bit
)
AS
BEGIN TRANSACTION
IF (SELECT COUNT(*) FROM dbo.Customer WHERE customer_ID = @cust_ID AND First_Name = @Name_First AND Last_Name = @Name_Last AND Age = @Years_Old AND Gender = @Male_or_Female AND Address = @Residence AND Email_Address = @Address_Email AND Phone_Number = @Number_Phone AND Password = @Passcode AND Admin = @Role) < 1
BEGIN
    INSERT INTO dbo.Customer(customer_ID, First_Name, Last_Name, Age, Gender, Address, Email_Address, Phone_Number, Password, Admin)
    VALUES (@cust_ID, @Name_First, @Name_Last, @Years_Old, @Male_or_Female, @Residence, @Address_Email, @Number_Phone, @Passcode,  @Role)
END

IF @@ERROR != 0
    ROLLBACK TRANSACTION
ELSE
    COMMIT TRANSACTION
GO



CREATE PROCEDURE [dbo].[Add_Order](
    @ID_Order int,
    @Time_Date datetime,
    @Qty int,
    @ID_product int,
    @ID_cust int
)
AS 
BEGIN TRANSACTION
IF (SELECT COUNT(*) FROM dbo.Orders WHERE Order_ID = @ID_Order AND Date_Time = @Time_Date AND Quantity = @Qty AND Product_ID = @ID_product AND Customer_ID = @ID_cust) < 1
INSERT INTO dbo.Orders(Order_ID, Date_Time, Quantity, Product_ID, Customer_ID) 
VALUES(@ID_Order, @Time_Date, @Qty, @ID_product, @ID_cust)

BEGIN
UPDATE dbo.Products
SET Stock = Stock - @Qty
WHERE Product_ID = @ID_product
END

BEGIN
UPDATE dbo.Products
SET Amount_Sold = Amount_Sold + @Qty
WHERE Product_ID = @ID_product
END


IF @@ERROR != 0
    ROLLBACK TRANSACTION
ELSE
    COMMIT TRANSACTION
GO



CREATE PROCEDURE [dbo].[Add_Product] (
    @ID_Product int,
    @Name_Product varchar(50),
    @Stock_Left int,
    @Product_Type varchar(50),
    @Sold_Amount int,
    @cost money
)
AS
BEGIN TRANSACTION
IF (SELECT COUNT(*) FROM dbo.Products WHERE Product_ID = @ID_Product AND Product_Name = @Name_Product AND Stock = @Stock_Left AND Type_of_Product = @Product_Type AND Amount_Sold = @Sold_Amount AND Price = @cost) < 1
BEGIN
    INSERT INTO dbo.Products(Product_ID, Product_Name, Stock, Type_of_Product, Amount_Sold, Price)
    VALUES (@ID_Product, @Name_Product, @Stock_Left, @Product_Type, @Sold_Amount, @cost)
END

IF @@ERROR != 0
    ROLLBACK TRANSACTION
ELSE
    COMMIT TRANSACTION
GO



CREATE PROCEDURE [dbo].[Cancel_Order](
    @ID_Order int,
    @ID_product int,
    @Qty int
)
AS
BEGIN TRANSACTION
DELETE FROM dbo.Orders WHERE Order_ID = @ID_Order

BEGIN
UPDATE dbo.Products
SET Stock = Stock + @Qty
WHERE Product_ID = @ID_product
END

BEGIN
UPDATE dbo.Products
SET Amount_Sold = Amount_Sold - @Qty
WHERE Product_ID = @ID_product
END

IF @@ERROR != 0 
    ROLLBACK TRANSACTION
ELSE
    COMMIT TRANSACTION
GO




CREATE PROCEDURE [dbo].[Change_Password] @ID INT, @Password VARCHAR(50)
AS 
UPDATE Customer
SET Password = @Password
WHERE Customer_ID = @ID;
GO




CREATE PROCEDURE [dbo].[Change_Price](
    @ID_product int,
    @cost money
)
AS
BEGIN TRANSACTION
UPDATE dbo.Products
SET Price = @cost
WHERE Product_ID = @ID_product;

IF @@ERROR != 0
    ROLLBACK TRANSACTION
ELSE
    COMMIT TRANSACTION
GO



CREATE PROCEDURE [dbo].[Change_Stock](
    @ID_Product int,
    @Stock_Left int
)
AS
BEGIN TRANSACTION
UPDATE dbo.Products
SET Stock = @Stock_Left
WHERE Product_ID = @ID_Product;

IF @@ERROR != 0
    ROLLBACK TRANSACTION
ELSE
    COMMIT TRANSACTION
GO



CREATE PROCEDURE [dbo].[Remove_Customer](
    @cust_ID int
)
AS
BEGIN TRANSACTION
DELETE FROM dbo.Customer WHERE Customer.Customer_ID = @cust_ID

IF @@ERROR != 0
    ROLLBACK TRANSACTION
ELSE
    COMMIT TRANSACTION
GO



CREATE PROCEDURE [dbo].[Remove_Product](
    @ID_Product int
)
AS
BEGIN TRANSACTION
DELETE FROM dbo.Products WHERE Products.Product_ID = @ID_Product

IF @@ERROR != 0
    ROLLBACK TRANSACTION
ELSE
    COMMIT TRANSACTION
GO




CREATE PROCEDURE [dbo].[Update_Profile](
    @cust_ID int,
    @Name_First varchar (50),
    @Name_Last varchar (50),
    @Years_Old int,
    @Male_or_Female varchar (15),
    @Residence varchar (50),
    @Address_Email varchar (64),
    @Number_Phone varchar (20),
    @Passcode varchar (50),
    @Role bit
)
AS
BEGIN TRANSACTION
UPDATE dbo.Customer SET First_Name = @Name_First, Last_Name = @Name_Last, Age = @Years_Old, Gender = @Male_or_Female, Address = @Residence, Email_Address = @Address_Email, Phone_Number = @Number_Phone, Password = @Passcode, Admin = @Role
WHERE Customer_ID = @cust_ID

IF @@ERROR != 0
    ROLLBACK TRANSACTION
ELSE
    COMMIT TRANSACTION
GO


